name: Power BI Deployment

on:
  push:
    branches:
      - newscr

jobs:
  power-bi-deployment:
    runs-on: ubuntu-latest

    env:
      AppID: ${{ secrets.PBI_APP_ID }}
      Secret: ${{ secrets.PBI_APP_SECRET }}
      TenantID: ${{ secrets.PBI_TENANT_ID }}
      ReportPath: "path/to/your/report.pbix"
      ReportName: "YourReportName"
      WorkspaceName: "YourWorkspaceName"
      ParamDbName: "DatabaseNameParameterName"
      DbName: "NewDatabaseName"
      ParamDbServerName: "ServerNameParameterName"
      DbServer: "NewServerName"
      sqlUserName: "YourSQLUserName"
      sqlUserPassword: "YourSQLPassword"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install PowerShell modules
        run: |
          Install-Module -Name MicrosoftPowerBIMgmt -Force -Scope CurrentUser
          Install-Module -Name Az -Force -Scope CurrentUser
          Install-Module -Name NewtonSoft.Json -Force -Scope CurrentUser

      - name: Set up Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to Power BI
        run: |
          $Password = ConvertTo-SecureString $Secret -AsPlainText -Force
          $creds = New-Object PSCredential $AppID, $Password
          Connect-PowerBIServiceAccount -ServicePrincipal -Credential $creds -Tenant $TenantID

      - name: Get existing workspace
        run: |
          $Workspace = Get-PowerBIWorkspace -Name $WorkspaceName

      - name: Publish PBIX
        run: |
          New-PowerBIReport -Path $ReportPath -Name $ReportName -WorkspaceId $Workspace.Id -ConflictAction CreateOrOverwrite

      - name: Take Over Report
        run: |
          Invoke-PowerBIRestMethod -Method Post -Url groups/$($Workspace.Id.Guid)/datasets/$($Report.DatasetId)/Default.TakeOver -WarningAction Ignore

      - name: Update Dataset Parameters
        run: |
          $Parameters = @{
            "updateDetails"= @(
              @{
                "name"="$($ParamDbName)";
                "newValue"="$($DbName)";
              },
              @{
                "name"="$($ParamDbServerName)";
                "newValue"="$($DbServer)";
              }            
            )
          }
          $ParametersJson = $Parameters | ConvertTo-Json -Compress
          $UpdateParam = Invoke-PowerBIRestMethod -Method Post -Body $ParametersJson -Url groups/$($Workspace.Id.Guid)/datasets/$($Report.DatasetId)/Default.UpdateParameters

      - name: Update Datasource (SQL Credentials)
        run: |
          $Dataset = Get-PowerBIDataset -WorkspaceId $Workspace.Id -Id $Report.DatasetId
          $WorkspaceId = $Workspace.Id
          $DatasetId = $Dataset.Id
          $Datasources = Get-PowerBIDatasource -WorkspaceId $WorkspaceId -DatasetId $DatasetId

          foreach($Datasource in $Datasources) {
            $GatewayId = $Datasource.GatewayId
            $DatasourceId = $Datasource.DatasourceId
            $DatasourePatchUrl = "gateways/$GatewayId/datasources/$DatasourceId"
            $userNameJson = "{""name"":""username"",""value"":""$sqlUserName""}"
            $passwordJson = "{""name"":""password"",""value"":""$sqlUserPassword""}"

            $patchBody = @{
              "credentialDetails" = @{
                "credentials" = "{""credentialData"":[ $userNameJson, $passwordJson ]}"
                "credentialType" = "Basic"
                "encryptedConnection" =  "Encrypted"
                "encryptionAlgorithm" = "None"
                "privacyLevel" = "None"
              }
            }
            $patchBodyJson = ConvertTo-JSon -InputObject $patchBody -Depth 6 -Compress
            $CredUpdate = Invoke-PowerBIRestMethod -Method Patch -Url $DatasourePatchUrl -Body $patchBodyJson
          }

      - name: Refresh Dataset
        run: |
          Invoke-PowerBIRestMethod -Method Post -Url groups/$($Workspace.Id.Guid)/datasets/$($Report.DatasetId)/refreshes -WarningAction Ignore
