name: Update Power BI Dataset Parameters # Workflow name

on:
  push:
    branches:
      - test # Trigger the workflow on pushes to the 'main' branch

jobs:
  update-dataset-parameters: # Job name
    runs-on: ubuntu-latest # Specifies the runner environment as Ubuntu latest version

    steps: # List of steps to execute
    - name: Checkout code # Step name
      uses: actions/checkout@v3 # Uses the 'checkout' action to fetch the repository's code

    - name: Set up environment variables # Step to set environment variables
      run: | # Allows running multi-line shell commands
        echo "CLIENT_ID=${{ secrets.POWER_BI_CLIENT_ID }}" >> $GITHUB_ENV # Sets the CLIENT_ID environment variable from a secret
        echo "CLIENT_SECRET=${{ secrets.POWER_BI_CLIENT_SECRET }}" >> $GITHUB_ENV # Sets the CLIENT_SECRET environment variable from a secret
        echo "TENANT_ID=${{ secrets.POWER_BI_TENANT_ID }}" >> $GITHUB_ENV # Sets the TENANT_ID environment variable from a secret
        echo "DATASET_ID=${{ secrets.POWER_BI_DATASET_ID }}" >> $GITHUB_ENV # Sets a DATASET_ID environment variable (replace with your dataset ID)
      env: # Defines environment variables to be used within this step
        CLIENT_ID: ${{ secrets.POWER_BI_CLIENT_ID }} # Sets the CLIENT_ID environment variable to the value stored in the 'CLIENT_ID' secret
        CLIENT_SECRET: ${{ secrets.POWER_BI_CLIENT_SECRET }} # Sets the CLIENT_SECRET environment variable to the value stored in the 'CLIENT_SECRET' secret
        TENANT_ID: ${{ secrets.POWER_BI_TENANT_ID }} # Sets the TENANT_ID environment variable to the value stored in the 'TENANT_ID' secret

    - name: Obtain Power BI API Token # Step to obtain an access token for Power BI API
      id: get-token # Defines an identifier for this step, which can be referenced later
      run: | # Allows running multi-line shell commands
        response=$(curl -X POST -d "grant_type=client_credentials" \
          -d "client_id=$CLIENT_ID" \
          -d "client_secret=$CLIENT_SECRET" \
          -d "scope=https://analysis.windows.net/powerbi/api/.default" \
          "https://login.microsoftonline.com/$TENANT_ID/oauth2/token")

        access_token=$(echo "$response" | jq -r '.access_token') # Extracts the access_token from the JSON response

        echo "ACCESS_TOKEN=$access_token" >> $GITHUB_ENV # Sets the ACCESS_TOKEN environment variable with the obtained access token
      env: # Defines environment variables to be used within this step
        CLIENT_ID: ${{ secrets.POWER_BI_CLIENT_ID }} # Reuses the CLIENT_ID environment variable from the previous step
        CLIENT_SECRET: ${{ secrets.POWER_BI_CLIENT_SECRET }} # Reuses the CLIENT_SECRET environment variable from the previous step
        TENANT_ID: ${{ secrets.POWER_BI_TENANT_ID }} # Reuses the TENANT_ID environment variable from the previous step

    - name: Make POST request to update dataset parameters # Step to update dataset parameters using the obtained access token
      run: | # Allows running multi-line shell commands
        DATASET_ID=$INPUT_DATASET_ID # Assigns the DATASET_ID from the input (should be provided when triggering the workflow)
        ACCESS_TOKEN=$INPUT_ACCESS_TOKEN # Assigns the ACCESS_TOKEN from the input

        JSON_PAYLOAD='{
          "updateDetails": [
            {
              "name": "SQLDB DEV",
              "newValue": "devidata"
            },
            {
              "name": "SQL Server Dev",
              "newValue": "devidata.database.windows.net"
            }
          ]
        }' # Defines a JSON payload to send in the POST request
        
        # Make the POST request with the JSON payload using curl
        curl -X POST \
          "https://api.powerbi.com/v1.0/myorg/datasets/${DATASET_ID}/Default.UpdateParameters" \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/json" \
          -d "$JSON_PAYLOAD"
      env: # Defines environment variables to be used within this step
        INPUT_DATASET_ID: ${{ env.DATASET_ID }} # Sets the INPUT_DATASET_ID environment variable
        INPUT_ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }} # Sets the INPUT_ACCESS_TOKEN environment variable
